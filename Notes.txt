Ep-2 
(31:48) =>
There are two packages/dependencies that we can install,
1. Dev Dependencies - devDependencies in a package.json file  are packages that are used during the development and testing of a project but are not required for the application to run in a production environment.(When we are in developing we require Dev Dependencies)
2. Normal Dependencies - It is use production 

(37:11) => (Video me galat bataya hai)
Tilde (~):
Restricts updates to only patch releases within the same minor version. For example, "~1.2.3" would allow versions 1.2.4, 1.2.5, etc., but not 1.3.0. 

Caret (^) :
Allows updates within the same major version, but also minor and patch releases. For example, "^1.2.3" would allow versions 1.2.4, 1.2.5, 1.3.0, 1.3.1, etc., but not 2.0.0. 


(48:35) => 
Transitive Dependencies => A transitive dependency in computer science refers to a functional dependency pattern where the value of one attribute is determined by another attribute, which in turn is determined by a third attribute.

like we just installed wanted to install parcel (npm install -D parcel), but we got a node _modules, in which there are many many files, why? Beacuse parcel has its dependencies, its dependencies has its dependencies, and that dependencies has its own dependencies and so on...

Ep-3

(26:24)
jsx - HTML-like or XML-like syntax BUT it is not HTML in js file, both are different

Ep-5

(44:38)
There are two types of export/import

-Default Export/Import: 
export default Component;
import Component from "path";

-Named Export/Import:
export const Component;
import {Component} from "path";

(1:19:17)
#React Hooks - it is a normal JS utility functions
 There are 2 very imp hooks:
 - useState()
 - useEffect()

(1:37:38)
Whenever the state variable changes react re-render its component.

(1:59:57)
Why react is fast?
Because it is doing efficient DOM manipulation, and react can find difference between virtual DOMs and update it.

Ep-6 part 1
(00: 54 :00)
Shimmer UI - A shimmer UI is a version of the UI that doesn't contain actual content, but instead mimics the layout and shapes of the content that will eventually appear

(1:04:14)
Condistional Rendering - Rendering on the basis of a condition is know as Condistional rendering.

(1:53:20)
Whenever the state variable update, react trigger a reconciliation cycle(re-render the component)

Ep-7 part 1
(05:05)
useEffect(()=>{
    console.log("No dependency")
});
If there are no dependency array in useEffect then it will be called/run on every render.

useEffect(()=>{
    console.log("Empty dependency")
},[]);
If the dependency array is empty then useEffect is called on only inetial render, and just once.

useEffect(()=>{
    console.log("Dependency present")
}[dependency]);
If there a dependency is useEffect then it is called/run every time the dependency changes.

# 2 types of Routing in web apps
- Clint Side Routing
- Server Side Routing

Ep-8 part 1
Class Based Component
(12:15)
Functional Component: It is a function that returns some JSX,
Class Based Component: It is a class which extend react.componet has a render method which returns some piece of JSX,

(20:10)
Why do we have to write super props?

(41:30)
NEVER update state variables directly.

Ep-9
Single Responsibility Principle ----  SRP (my own shortcut)

(06:15)
Feature of SRP:
1. Code becomes more reusable.
2. Code become more maintainable.
3. Code become more testable.

(09:15)
Hook is just a utility function,

Benifits of making custom hooks:-
1. Make code more readable
2. Make code more modular
3. Make code more reusable

(34:30)
online/offline feature

(1:06:30)
Chunking        // These all are the same thing, (same meaning, different name)
Code Splitting
Dynamic Bundling
Lazy Loading
On Demand Loading
Dynamic Import


Personal brand is a concious and intentional effort

Ep-11 part-1
Higher Order Component

Higher order component is a function that takes a component and returns a component.

(23:00)
1. Controlled and Uncontrolled component
2. Lifting the state up

Ep-11 part-2

. Props Drilling - Prop drilling refers to the process of passing down props through multiple layers of components, even when some of those components do not directly use the props.

. React Context - React Context is a feature in React that provides a way to share data or state throughout the component tree without explicitly passing props down manually at every level.
   . createContext(),
   . useContext(),
   . userContext.consumer(),

Only the data which we are using at multiple places or you feel that you can use that data in multiple places, that is where we will use Context, 

Other wise there would be no need of Props.

What is the differnce between Redux and Context.

Ep-12 part-1

Redux:- 
- Redux is Not mandatory.
- Redux and React are different libraries.
- Redux is not the only library that is use for managing state, There is a library which isknown as Zustand.
 
we will be using Redux Toolkit (RTK).

(19:00)
VERY IMPORTANT

When we want to add any items to our cart by clicking ADD button, How can we do that?  (Ans 182)

Understant it using Redux Toolkit

Redux Store: It is nothing but a big whole object, and it is kept in a central global place. Any componentany access Redux store, it can write data it can read data from that store.

Is it a good practice to keep all the data in the whole big object ?
  Yes, it is completely fine to keep all the data inside a one big object file.


But keeping all the data in one object file make the file clumsy.

So to prevent our file from becoming clumsy we Slices(small portion of redux store) in our redux store.

Slices - A slice represents a specific portion of the application's state, bundled with its related actions and reducers

example of Slices that we can create : Cart slice, Theam slice, User slice, etc.


BUT we can't directly modify our cart slice...

When we click on add button it DISPATCHES an ACTION which calls an reduced function and that updates the cart slice.

So now we know how to update/add data from the component to the slice,

(31:00)
BUT, How will can we see data from slice to our component?

So, for that we use something know as SELECTOR,

We use selector to read data from the Slice, and the selector will modify our react component
This is know as Subscribing to the store, means the data is in the sync with the store, If the data in my store changes my react componet will update automagically

                           DISPATCH      REDUCED         REDUX       SUBSCRIBED
             [ADD BTN] --> [ACTION] --> [FUNCTION] --> [{STORE}] --> [SELECTOR] --> [Upadete's the component]
                 ⬇                                                                               ⬆
                  ➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡XXXXXXXXXXXXXXXX➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡➡
                       Components are not updated directly, It follow's these above steps.

useSelector from react-redux for reading data from the store.
useDispatch from react-redux for dispatching data from the store.

    ........IMPORTANT.........
What's the difference between these 3 ?

onClick=(handleClick);
onClick=(() => handleClick(items));
onClick=(handleClick(items));


Ep-13-part 1 

# Types of Testing(for developer) {in this course we will focus on unit and Integration testing }

- Unit testing = Testing one component in isolation
- Integration testing = Testing process where different modules or components of an application are combined and tested as a group to ensure they interact correctly
- End to End testing (e2e testing)= testing methodology that verifies an application's workflow from start to finish, ensuring all integrated components work together as expected from a user's perspective. 

We will be using React Testing library.

React testing library uses something known as Jest.
Jest is JavaScript Testing Framework.

And React teesting library is build on top of DOM Testing library, and DOM Testing library uses jest behind the scene,
So that's why React testing library needs Jest in our project.